
### validateTabularDataPackage - default flow
PUT {{base-url}}/validateTabularDataPackage
Content-Type: application/json

{
  "profile": "tabular-data-package",
  "name": "my-dataset",
  "resources" : [
    {
      "name" : "example",
      "profile" : "tabular-data-resource",
      "schema" : {
        "fields" : [
          {
            "name" : "height",
            "type" : "integer"
          },
          {
            "name" : "age",
            "type" : "integer"
          },
          {
            "name" : "name",
            "type" : "string"
          }
        ]
      }
    }
  ]
}

### validateDataPackage - default flow
PUT {{base-url}}/validateDataPackage
Content-Type: application/json

{
  "profile": "tabular-data-package",
  "name": "my-dataset",
  "resources" : [
    {
      "name" : "example",
      "profile" : "tabular-data-resource",
      "schema" : {
        "fields" : [
          {
            "name" : "height",
            "type" : "integer"
          },
          {
            "name" : "age",
            "type" : "integer"
          },
          {
            "name" : "name",
            "type" : "string"
          }
        ]
      }
    }
  ]
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### POST /tableschemas - default flow
POST {{base-url}}/tableschemas
Content-Type: application/json

{
  "fields" :
  [
    {
      "name" : "height",
      "type" : "integer"
    },
    {
      "name" : "age",
      "type" : "integer"
    },
    {
      "name" : "name",
      "type" : "string"
    }
  ]
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
%}

### POST /tableschemas - mispelled "fields" property
POST {{base-url}}/tableschemas
Content-Type: application/json

{
  "fieljkjlkds" :
  [
    {
      "name" : "height",
      "type" : "integer"
    },
    {
      "name" : "age",
      "type" : "integer"
    },
    {
      "name" : "name",
      "type" : "string"
    }
  ]
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### POST /tableschemas - empty field array
POST {{base-url}}/tableschemas
Content-Type: application/json

{
  "fields" : []
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### POST /tableschemas - mispelled required column def "name" attribute
POST {{base-url}}/tableschemas
Content-Type: application/json

{
  "fields" :
  [
    {
      "name" : "height",
      "type" : "integer"
    },
    {
      "nasdfdsfme" : "age",
      "type" : "integer"
    },
    {
      "name" : "name",
      "type" : "string"
    }
  ]
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### POST /tableschemas - missing required column def "name" attribute
POST {{base-url}}/tableschemas
Content-Type: application/json

{
  "fields" :
  [
    {
      "name" : "height",
      "type" : "integer"
    },
    {
      "name" : "age",
      "type" : "integer"
    },
    {
      "type" : "string"
    }
  ]
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### POST /tableschemas - multiple invalid column defs
POST {{base-url}}/tableschemas
Content-Type: application/json

{
  "fields" :
  [
    {
      "name" : "height",
      "type" : "integer"
    },
    {
      "nassme" : "age",
      "type" : "integer"
    },
    {
      "type" : "string"
    }
  ]
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

###
