name: "Metadata Curator"
on: 
  push:
    branches:
      - '**'
  pull_request:
    types:
      - opened
  release:
    types: ['created']
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  QUAYIO_PASSWORD: ${{ secrets.QUAYIO_PASSWORD }}
  QUAYIO_USERNAME: ${{ secrets.QUAYIO_USERNAME }}
  NODE_VERSION: 14.18.1
jobs:
  # audit:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: backend
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: install dependencies
  #       run: npm ci
  #     - name: audit
  #       if: github.event_name != 'release' || github.event.action != 'created'
  #       run: npm audit
  
  unit_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: npm ci
      - name: test
        run: |
          cp config/default.json.example config/default.json
          npm test

  quay_io_backend:
    runs-on: ubuntu-latest
    needs: ["unit_test"]
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - uses: actions/checkout@v2

      - name: push to quay
        run: |
          export BRANCH=${GITHUB_REF##*/}
          chmod ugo+x ./docker_quayio_push
          ./docker_quayio_push metadata_curator_api
  
  quay_io_frontend:
    runs-on: ubuntu-latest
    needs: ["unit_test"]
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - uses: actions/checkout@v2

      - name: push to quay
        run: |
          export BRANCH=${GITHUB_REF##*/}
          chmod ugo+x ./docker_quayio_push
          ./docker_quayio_push metadata_curator_ui

  
  deploy_backend:
    runs-on: ubuntu-latest
    needs: ["quay_io_backend", "integration_tests"]
    # needs: ["quay_io_backend"]
    if: success() && ( (github.event_name == 'release' && github.event.action == 'created') || (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/develop') )
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_DEPLOY_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_DEPLOY_PASSWORD }}
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - uses: actions/checkout@v2
      - name: push to dockerhub
        run: |
          export BRANCH=${GITHUB_REF##*/}
          chmod ugo+x ./docker_push
          ./docker_push metadata_curator_api

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: ["quay_io_frontend", "deploy_backend", "integration_tests"]
    # needs: ["quay_io_frontend", "deploy_backend"]
    if: success() && ( (github.event_name == 'release' && github.event.action == 'created') || (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/develop') )
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_DEPLOY_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_DEPLOY_PASSWORD }}
      WEBHOOK_URL: ${{secrets.WEBHOOK_URL}}
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - uses: actions/checkout@v2
      - name: push to dockerhub
        run: |
          export BRANCH=${GITHUB_REF##*/}
          chmod ugo+x ./docker_push
          ./docker_push metadata_curator_ui

  bump_version_after_release:
    runs-on: ubuntu-latest
    needs: ["deploy_frontend"]
      # needs: ["quay_io_frontend", "deploy_backend"]
    if: success() && github.event_name == 'release' && github.event.action == 'created'
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
    - uses: actions/checkout@v3
      with:
        ref: develop
    - run: |
          cd backend && npm version patch
          cd frontend && npm version patch
    - uses: EndBug/add-and-commit@v9
      with:
        default_author: github_actions


  integration_tests:
    runs-on: ubuntu-latest
    needs: ["quay_io_backend", "quay_io_frontend"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      - name: terraform
        env:
          TERRAFORM_VERSION: "0.13.6"
          KATALON_VERSION: "6.0.5"
        run: |
          export WD=`pwd`
          export BRANCH=${GITHUB_REF##*/}
          cd /tmp
          wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          unzip -o /tmp/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          rm -rf /tmp/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          chmod +x terraform
          alias terraform='/tmp/terraform'
          cd $WD/terraform
          mkdir _tmp
          chmod -R 777 _tmp
          python scripts/prepare_images_variable.py
          cp terraform.tfvars.example terraform.tfvars
          export DOCKER_REGISTRY_USER=$DOCKER_USERNAME
          export DOCKER_REGISTRY_PASS=$DOCKER_PASSWORD
          chmod 777 ./scripts/keycloak-setup.sh
          echo provider "docker" { > docker.tf
          echo registry_auth { >> docker.tf
          echo address  = \"quay.io\" >> docker.tf
          echo username = \"${QUAYIO_USERNAME}\" >> docker.tf
          echo password = \"${QUAYIO_PASSWORD}\" >> docker.tf
          echo } >> docker.tf
          echo } >> docker.tf
          echo "127.0.0.1 mc.example.demo" | sudo tee -a /etc/hosts
          echo "127.0.0.1 auth.example.demo" | sudo tee -a /etc/hosts
          echo "127.0.0.1 auth.example.demo" | sudo tee -a /etc/hosts
          terraform init
          terraform apply -var hostRootPath=`pwd`/_tmp -auto-approve

      - name: test
        timeout-minutes: 30
        run: |
          docker ps
          sleep 45
          docker ps
          docker logs mc_backend
          cd frontend
          cp tests/step-definitions/config.json.example tests/step-definitions/config.json
          sudo apt-get install xvfb openssl
          export NODE_ENV='development'
          
          sudo cp ../terraform/_tmp/ssl/example.crt /usr/local/share/ca-certificates/example.crt
          sudo update-ca-certificates

          npm ci
          npm install chromedriver@latest
          xvfb-run --auto-servernum npm test | tee test_output
          export OUTPUT=$(cat test_output)
          if [[ $OUTPUT == *"failed"* ]]; then
            exit 1
          fi
      - name: "store screens"
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: screenshots
          path: frontend/screenshots
      - name: "store selenium server info"
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: selenium-log.log
          path: frontend/*selenium-server.log
      - name: "output mc backend logs"
        if: ${{ always() }}
        run: |
          docker logs --since 40m mc_backend || echo "backend container not found"
      - name: "output mc formio logs"
        if: ${{ failure() }}
        run: |
          docker logs --since 40m mc_formio || echo "formio container not found"
      
      - name: "output mc keycloak logs"
        if: ${{ failure() }}
        run: |
          docker logs --since 40m mc_keycloak || echo "formio container not found"

      - name: "output mc nginx logs"
        if: ${{ failure() }}
        run: |
          docker logs --since 40m mc_nginx || echo "nginx container not found"

      - name: "output mc forum api logs"
        if: ${{ failure() }}
        run: |
          docker exec mc_forum_api env || echo "forum api container not found"
          docker logs --since 40m mc_forum_api || echo "forum api container not found"

      - name: "output mc datasets from database"
        if: ${{ failure() }}
        run: |
          docker exec mc_mongodb env || echo "mongo container not found"
          docker exec mc_mongodb mongo oc_db --eval db.repo.find\({}\) || echo "mongo container not found"
